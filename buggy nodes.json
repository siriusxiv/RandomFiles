{"nodeData":[{"name":"CreateCamera","funcname":"CreateCamera","info":"ã‚«ãƒ¡ãƒ©ã‚’ã¤ãã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[91,27.25],"varname":"instCreateCamera1","customfuncfile":"createcamera.lua","input":[{"name":"position","type":"vec3","value":[0,0,"-300"]},{"name":"target","type":"vec3","value":[0,0,0]},{"name":"up","type":"vec3","value":[0,1,0]},{"name":"fov","type":"float","value":60},{"name":"screensize","type":"vec2","value":["1024","1024"]},{"name":"filename","type":"string","value":"output.jpg"}],"output":[{"name":"camera","type":"RenderObject"}],"customfunc":"function CreateCamera(property)\n\tlocal cam;\t\n\tprint('create camera',\n\t\tproperty.screensize[1], property.screensize[2],\n\t\tproperty.filename)\n\tcam = Camera()\n\tcam:SetScreenSize(property.screensize[1], property.screensize[2])\n\tcam:SetFilename(property.filename)\n\tcam:LookAt(\n\t\tproperty.position[1], property.position[2], property.position[3],\n\t\tproperty.target[1], property.target[2], property.target[3],\n\t\tproperty.up[1], property.up[2], property.up[3],\n\t\tproperty.fov\n\t)\n\t\n\tfunction camera()\n\t\treturn cam\n\tend\n\treturn {\n\t\tcamera = camera\n\t}\nend\n"},{"name":"CreatePolygonModel","funcname":"CreatePolygonModel","info":"ãƒ¡ãƒƒã‚·ãƒ¥ãƒ‡ãƒ¼ã‚¿ã‚’è¡¨ç¤ºã•ã›ã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[523,166.5],"varname":"instPolygonModel2","customfuncfile":"createPolygonModel.lua","input":[{"name":"mesh","type":"BufferMeshData"},{"name":"translate","type":"vec3","value":[0,0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":[1,1,1]},{"name":"shadername","type":"string","value":"white.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePolygonModel(property)\n\tlocal pm = PolygonModel();\n\tpm:Create(property.mesh);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"LoadOBJ","funcname":"LoadOBJ","info":"OBJãƒ•ã‚¡ã‚¤ãƒ«ã‚’èª­ã¿è¾¼ã‚€ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[67,238.25],"varname":"instOBJLoader3","customfuncfile":"objloader.lua","input":[{"name":"filepath","type":"string","value":"../../../hrender/test/bunny.obj"}],"output":[{"name":"MeshData","type":"BufferMeshData"},{"name":"PointData","type":"BufferPointData"},{"name":"LineData","type":"BufferLineData"},{"name":"NormalData","type":"BufferVectorData"}],"customfunc":"function LoadOBJ(property)\n\tlocal objloader\n\tobjloader = OBJLoader()\n\tobjloader:Load(property.filepath)\n\treturn objloader\nend\n"},{"name":"Render","funcname":"Render","info":"ãƒ¬ãƒ³ãƒ€ãƒªãƒ³ã‚°ã‚’è¡Œã†ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[802,41.5],"varname":"root5","customfuncfile":"render.lua","rootnode":true,"input":[{"name":"RenderObject","type":"RenderObject","array":[{"name":"RenderObject0","type":"RenderObject"},{"name":"RenderObject1","type":"RenderObject"},{"name":"RenderObject2","type":"RenderObject"}]}],"output":[],"customfunc":"function Render(arg)\n\trender(arg.RenderObject)\nend"},{"name":"CreateLineModel","funcname":"CreateLineModel","info":"Lineãƒ‡ãƒ¼ã‚¿ã‚’è¡¨ç¤ºã•ã›ã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[378,98.25],"varname":"instLineModel7","customfuncfile":"createLineModel.lua","input":[{"name":"line","type":"BufferLineData"},{"name":"translate","type":"vec3","value":[0,0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":["4","4","4"]},{"name":"width","type":"float","value":"0.2"},{"name":"shadername","type":"string","value":"white.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreateLineModel(property)\n\tlocal lm = LineModel();\n\tlm:Create(property.line);\n\tlm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tlm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tlm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tlm:SetShader(property.shadername)\n\tlm:SetLineWidth(property.width)\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tlm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tlm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tlm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tlm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn lm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"CreatePointModel","funcname":"CreatePointModel","info":"Pointãƒ‡ãƒ¼ã‚¿ã‚’è¡¨ç¤ºã•ã›ã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[397.5,367.25],"varname":"instPointModel8","customfuncfile":"createPointModel.lua","input":[{"name":"point","type":"BufferPointData"},{"name":"translate","type":"vec3","value":[0,0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":["4","4","4"]},{"name":"shadername","type":"string","value":"color.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePointModel(property)\n\tlocal pm = PointModel();\n\tpm:Create(property.point);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"UniformVec4","funcname":"UniformVec4","info":"Uniform Vec4ã‚’ã¤ãã‚‹ãƒŽãƒ¼ãƒ‰","pos":[69.5,394.25],"varname":"instUniformVec49","customfuncfile":"vec4.lua","input":[{"name":"name","type":"string","value":"color"},{"name":"val","type":"vec4","value":["0.5","0.5","0.5","1"]}],"output":[{"name":"uniform","type":"Uniform"}],"customfunc":"function UniformVec4(arg)\n\tlocal name = arg.name\n\tlocal val  = arg.val\n\treturn {\n\t\tuniform = function()\n\t\t\treturn {name=name, value=val, type='vec4'}\n\t\tend\n\t}\nend"},{"name":"Isosurf","funcname":"Isosurf","info":"Volumeãƒ‡ãƒ¼ã‚¿ã‚’Isosurfã™ã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[882,404.5],"varname":"instIsosurf1","customfuncfile":"isosurf.lua","input":[{"name":"volume","type":"BufferVolumeData"},{"name":"isovalue","type":"float","value":1}],"output":[{"name":"MeshData","type":"BufferMeshData"}],"customfunc":"function Isosurf(property)\n\tlocal vm = VolumeToMeshData();\n\tvm:Create(property.volume, property.isovalue)\n\t--vm:SetIsovalue(property.isovalue)\n\treturn vm\nend\n"},{"name":"CreateCamera","funcname":"CreateCamera","info":"ã‚«ãƒ¡ãƒ©ã‚’ã¤ãã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[1257,76.5],"varname":"instCreateCamera3","customfuncfile":"createcamera.lua","input":[{"name":"position","type":"vec3","value":[0,0,-300]},{"name":"target","type":"vec3","value":[0,0,0]},{"name":"up","type":"vec3","value":[0,1,0]},{"name":"fov","type":"float","value":60},{"name":"screensize","type":"vec2","value":[512,512]},{"name":"filename","type":"string","value":"output1.jpg"}],"output":[{"name":"camera","type":"RenderObject"}],"customfunc":"function CreateCamera(property)\n\tlocal cam;\t\n\tprint('create camera',\n\t\tproperty.screensize[1], property.screensize[2],\n\t\tproperty.filename)\n\tcam = Camera()\n\tcam:SetScreenSize(property.screensize[1], property.screensize[2])\n\tcam:SetFilename(property.filename)\n\tcam:LookAt(\n\t\tproperty.position[1], property.position[2], property.position[3],\n\t\tproperty.target[1], property.target[2], property.target[3],\n\t\tproperty.up[1], property.up[2], property.up[3],\n\t\tproperty.fov\n\t)\n\t\n\tfunction camera()\n\t\treturn cam\n\tend\n\treturn {\n\t\tcamera = camera\n\t}\nend\n"},{"name":"Render","funcname":"Render","info":"ãƒ¬ãƒ³ãƒ€ãƒªãƒ³ã‚°ã‚’è¡Œã†ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[1534,178.5],"varname":"root4","customfuncfile":"render.lua","rootnode":true,"input":[{"name":"RenderObject","type":"RenderObject","array":[{"name":"RenderObject0","type":"RenderObject"},{"name":"RenderObject1","type":"RenderObject"},{"name":"RenderObject2","type":"RenderObject"}]}],"output":[],"customfunc":"function Render(arg)\n\trender(arg.RenderObject)\nend"},{"name":"CreatePolygonModel","funcname":"CreatePolygonModel","info":"ãƒ¡ãƒƒã‚·ãƒ¥ãƒ‡ãƒ¼ã‚¿ã‚’è¡¨ç¤ºã•ã›ã‚‹ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[1139,392.5],"varname":"instPolygonModel1","customfuncfile":"createPolygonModel.lua","input":[{"name":"mesh","type":"BufferMeshData"},{"name":"translate","type":"vec3","value":[0,0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":[1,1,1]},{"name":"shadername","type":"string","value":"white.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePolygonModel(property)\n\tlocal pm = PolygonModel();\n\tpm:Create(property.mesh);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"LoadVOL","funcname":"LoadVOL","info":"VOLãƒ•ã‚¡ã‚¤ãƒ«ã‚’èª­ã¿è¾¼ã‚€ãŸã‚ã®ãƒŽãƒ¼ãƒ‰","pos":[635,421.5],"varname":"instVOLoader2","customfuncfile":"volloader.lua","input":[{"name":"filepath","type":"string","value":"data.vol"}],"output":[{"name":"VolumeData","type":"BufferVolumeData"},{"name":"Width","type":"float"},{"name":"Height","type":"float"},{"name":"Depth","type":"float"},{"name":"Component","type":"float"}],"customfunc":"function LoadVOL(property)\n\tlocal volloader\n\tvolloader = VOLLoader()\n\tvolloader:Load(property.filepath)\n\treturn volloader\nend\n"},{"name":"MPI_Info","funcname":"MPI_Info","info":"MPIã®æƒ…å ±ã‚’å–å¾—ã™ã‚‹ãƒŽãƒ¼ãƒ‰","pos":[849,255.5],"varname":"instMPI3","customfuncfile":"mpi.lua","input":[],"output":[{"name":"rank","type":"float"},{"name":"size","type":"float"}],"customfunc":"function MPI_Info(arg)\n\treturn {\n\t\trank = function()\n\t\t\treturn mpiRank()\n\t\tend,\n\t\tsize = function()\n\t\t\treturn mpiSize()\n\t\tend\n\t}\nend"}],"plugData":[{"output":{"node":"instCreateCamera1","plug":"camera"},"input":{"node":"root5","plug":"RenderObject0"}},{"output":{"node":"instPolygonModel2","plug":"model"},"input":{"node":"root5","plug":"RenderObject2"}},{"output":{"node":"instLineModel7","plug":"model"},"input":{"node":"root5","plug":"RenderObject1"}},{"output":{"node":"instOBJLoader3","plug":"LineData"},"input":{"node":"instLineModel7","plug":"line"}},{"output":{"node":"instOBJLoader3","plug":"PointData"},"input":{"node":"instPointModel8","plug":"point"}},{"output":{"node":"instUniformVec49","plug":"uniform"},"input":{"node":"instPointModel8","plug":"Uniform0"}},{"output":{"node":"instCreateCamera3","plug":"camera"},"input":{"node":"root4","plug":"RenderObject1"}},{"output":{"node":"instOBJLoader3","plug":"MeshData"},"input":{"node":"instPolygonModel2","plug":"mesh"}},{"output":{"node":"instIsosurf1","plug":"MeshData"},"input":{"node":"instPolygonModel1","plug":"mesh"}},{"output":{"node":"instPolygonModel1","plug":"model"},"input":{"node":"root4","plug":"RenderObject0"}},{"output":{"node":"instVOLoader2","plug":"VolumeData"},"input":{"node":"instIsosurf1","plug":"volume"}}]}
